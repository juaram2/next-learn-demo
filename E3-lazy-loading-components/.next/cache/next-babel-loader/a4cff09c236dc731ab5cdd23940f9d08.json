{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/aram/Desktop/next-learn-demo/E3-lazy-loading-components/lib/with-post.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport MyLayout from '../components/MyLayout';\nimport marked from 'marked';\nimport Highlight from 'react-highlight';\nmarked.setOptions({\n  gfm: true,\n  tables: true,\n  breaks: true\n});\nexport default function WithPost(options) {\n  return (\n    /*#__PURE__*/\n    function (_React$Component) {\n      _inherits(PostPage, _React$Component);\n\n      function PostPage() {\n        _classCallCheck(this, PostPage);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(PostPage).apply(this, arguments));\n      }\n\n      _createClass(PostPage, [{\n        key: \"renderMarkdown\",\n        value: function renderMarkdown() {\n          // If a code snippet contains in the markdown content\n          // then use Highlight component\n          if (/~~~/.test(options.content)) {\n            return __jsx(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 19\n              },\n              __self: this\n            }, __jsx(Highlight, {\n              innerHTML: true,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 20\n              },\n              __self: this\n            }, marked(options.content)));\n          } // If not, simply render the generated HTML from markdown\n\n\n          return __jsx(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: marked(options.content)\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          });\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          return __jsx(MyLayout, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          }, __jsx(\"h1\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32\n            },\n            __self: this\n          }, options.title), this.renderMarkdown());\n        }\n      }]);\n\n      return PostPage;\n    }(React.Component)\n  );\n}","map":{"version":3,"sources":["/Users/aram/Desktop/next-learn-demo/E3-lazy-loading-components/lib/with-post.js"],"names":["React","MyLayout","marked","Highlight","setOptions","gfm","tables","breaks","WithPost","options","test","content","__html","title","renderMarkdown","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEAD,MAAM,CAACE,UAAP,CAAkB;AAChBC,EAAAA,GAAG,EAAE,IADW;AAEhBC,EAAAA,MAAM,EAAE,IAFQ;AAGhBC,EAAAA,MAAM,EAAE;AAHQ,CAAlB;AAMA,eAAe,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AACxC;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,yCACmB;AACf;AACA;AACA,cAAI,MAAMC,IAAN,CAAWD,OAAO,CAACE,OAAnB,CAAJ,EAAiC;AAC/B,mBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,MAAC,SAAD;AAAW,cAAA,SAAS,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAsBT,MAAM,CAACO,OAAO,CAACE,OAAT,CAA5B,CADF,CADF;AAKD,WATc,CAWf;;;AACA,iBAAO;AAAK,YAAA,uBAAuB,EAAE;AAAEC,cAAAA,MAAM,EAAEV,MAAM,CAACO,OAAO,CAACE,OAAT;AAAhB,aAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AAdH;AAAA;AAAA,iCAgBW;AACP,iBACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAKF,OAAO,CAACI,KAAb,CADF,EAEG,KAAKC,cAAL,EAFH,CADF;AAMD;AAvBH;;AAAA;AAAA,MAA8Bd,KAAK,CAACe,SAApC;AAAA;AAyBD","sourcesContent":["import React from 'react'\nimport MyLayout from '../components/MyLayout'\nimport marked from 'marked'\nimport Highlight from 'react-highlight'\n\nmarked.setOptions({\n  gfm: true,\n  tables: true,\n  breaks: true\n})\n\nexport default function WithPost(options) {\n  return class PostPage extends React.Component {\n    renderMarkdown() {\n      // If a code snippet contains in the markdown content\n      // then use Highlight component\n      if (/~~~/.test(options.content)) {\n        return (\n          <div>\n            <Highlight innerHTML>{marked(options.content)}</Highlight>\n          </div>\n        );\n      }\n\n      // If not, simply render the generated HTML from markdown\n      return <div dangerouslySetInnerHTML={{ __html: marked(options.content) }} />;\n    }\n\n    render() {\n      return (\n        <MyLayout>\n          <h1>{options.title}</h1>\n          {this.renderMarkdown()}\n        </MyLayout>\n      );\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}